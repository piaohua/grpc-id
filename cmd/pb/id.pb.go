// Code generated by protoc-gen-go. DO NOT EDIT.
// source: id.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type SnowflakeRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnowflakeRequest) Reset()         { *m = SnowflakeRequest{} }
func (m *SnowflakeRequest) String() string { return proto.CompactTextString(m) }
func (*SnowflakeRequest) ProtoMessage()    {}
func (*SnowflakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b3ad0c1fc883139, []int{0}
}

func (m *SnowflakeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnowflakeRequest.Unmarshal(m, b)
}
func (m *SnowflakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnowflakeRequest.Marshal(b, m, deterministic)
}
func (m *SnowflakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnowflakeRequest.Merge(m, src)
}
func (m *SnowflakeRequest) XXX_Size() int {
	return xxx_messageInfo_SnowflakeRequest.Size(m)
}
func (m *SnowflakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SnowflakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SnowflakeRequest proto.InternalMessageInfo

func (m *SnowflakeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the snowflake id
type SnowflakeReply struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Time                 int64    `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Node                 uint64   `protobuf:"varint,3,opt,name=node,proto3" json:"node,omitempty"`
	Sequence             uint64   `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnowflakeReply) Reset()         { *m = SnowflakeReply{} }
func (m *SnowflakeReply) String() string { return proto.CompactTextString(m) }
func (*SnowflakeReply) ProtoMessage()    {}
func (*SnowflakeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b3ad0c1fc883139, []int{1}
}

func (m *SnowflakeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnowflakeReply.Unmarshal(m, b)
}
func (m *SnowflakeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnowflakeReply.Marshal(b, m, deterministic)
}
func (m *SnowflakeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnowflakeReply.Merge(m, src)
}
func (m *SnowflakeReply) XXX_Size() int {
	return xxx_messageInfo_SnowflakeReply.Size(m)
}
func (m *SnowflakeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SnowflakeReply.DiscardUnknown(m)
}

var xxx_messageInfo_SnowflakeReply proto.InternalMessageInfo

func (m *SnowflakeReply) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SnowflakeReply) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SnowflakeReply) GetNode() uint64 {
	if m != nil {
		return m.Node
	}
	return 0
}

func (m *SnowflakeReply) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// The request message containing the user's name.
type SonyflakeRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SonyflakeRequest) Reset()         { *m = SonyflakeRequest{} }
func (m *SonyflakeRequest) String() string { return proto.CompactTextString(m) }
func (*SonyflakeRequest) ProtoMessage()    {}
func (*SonyflakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b3ad0c1fc883139, []int{2}
}

func (m *SonyflakeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SonyflakeRequest.Unmarshal(m, b)
}
func (m *SonyflakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SonyflakeRequest.Marshal(b, m, deterministic)
}
func (m *SonyflakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SonyflakeRequest.Merge(m, src)
}
func (m *SonyflakeRequest) XXX_Size() int {
	return xxx_messageInfo_SonyflakeRequest.Size(m)
}
func (m *SonyflakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SonyflakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SonyflakeRequest proto.InternalMessageInfo

func (m *SonyflakeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the sonyflake id
type SonyflakeReply struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Time                 uint64   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Machine              uint64   `protobuf:"varint,3,opt,name=machine,proto3" json:"machine,omitempty"`
	Sequence             uint64   `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Msb                  uint64   `protobuf:"varint,5,opt,name=msb,proto3" json:"msb,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SonyflakeReply) Reset()         { *m = SonyflakeReply{} }
func (m *SonyflakeReply) String() string { return proto.CompactTextString(m) }
func (*SonyflakeReply) ProtoMessage()    {}
func (*SonyflakeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b3ad0c1fc883139, []int{3}
}

func (m *SonyflakeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SonyflakeReply.Unmarshal(m, b)
}
func (m *SonyflakeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SonyflakeReply.Marshal(b, m, deterministic)
}
func (m *SonyflakeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SonyflakeReply.Merge(m, src)
}
func (m *SonyflakeReply) XXX_Size() int {
	return xxx_messageInfo_SonyflakeReply.Size(m)
}
func (m *SonyflakeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SonyflakeReply.DiscardUnknown(m)
}

var xxx_messageInfo_SonyflakeReply proto.InternalMessageInfo

func (m *SonyflakeReply) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SonyflakeReply) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SonyflakeReply) GetMachine() uint64 {
	if m != nil {
		return m.Machine
	}
	return 0
}

func (m *SonyflakeReply) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *SonyflakeReply) GetMsb() uint64 {
	if m != nil {
		return m.Msb
	}
	return 0
}

func init() {
	proto.RegisterType((*SnowflakeRequest)(nil), "pb.SnowflakeRequest")
	proto.RegisterType((*SnowflakeReply)(nil), "pb.SnowflakeReply")
	proto.RegisterType((*SonyflakeRequest)(nil), "pb.SonyflakeRequest")
	proto.RegisterType((*SonyflakeReply)(nil), "pb.SonyflakeReply")
}

func init() { proto.RegisterFile("id.proto", fileDescriptor_4b3ad0c1fc883139) }

var fileDescriptor_4b3ad0c1fc883139 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x49, 0xb6, 0xea, 0x3a, 0x48, 0x5d, 0x82, 0x42, 0x28, 0x1e, 0x96, 0x1e, 0x64, 0xd9,
	0x43, 0x0b, 0x7a, 0xdb, 0xb3, 0x20, 0x9e, 0x84, 0xfa, 0x04, 0xe9, 0x36, 0xae, 0xc1, 0x36, 0x89,
	0x26, 0x22, 0x05, 0x4f, 0xbe, 0x82, 0xef, 0xe0, 0x0b, 0xf9, 0x0a, 0x3e, 0x88, 0x74, 0x6c, 0x96,
	0xda, 0x83, 0x7b, 0xfb, 0x67, 0xe6, 0xef, 0xdf, 0x6f, 0x26, 0x30, 0x55, 0x55, 0x66, 0x9f, 0x8d,
	0x37, 0x8c, 0xda, 0x32, 0x39, 0xdb, 0x18, 0xb3, 0xa9, 0x65, 0x2e, 0xac, 0xca, 0x85, 0xd6, 0xc6,
	0x0b, 0xaf, 0x8c, 0x76, 0xbf, 0x8e, 0xf4, 0x1c, 0x66, 0x77, 0xda, 0xbc, 0xde, 0xd7, 0xe2, 0x51,
	0x16, 0xf2, 0xe9, 0x45, 0x3a, 0xcf, 0x18, 0x44, 0x5a, 0x34, 0x92, 0x93, 0x39, 0x59, 0x1c, 0x16,
	0xa8, 0xd3, 0x0a, 0xe2, 0x81, 0xcf, 0xd6, 0x2d, 0x8b, 0x81, 0xaa, 0x0a, 0x3d, 0x51, 0x41, 0x55,
	0xd5, 0x7d, 0xe5, 0x55, 0x23, 0x39, 0x9d, 0x93, 0xc5, 0xa4, 0x40, 0x8d, 0x49, 0xa6, 0x92, 0x7c,
	0x82, 0x2e, 0xd4, 0x2c, 0x81, 0xa9, 0xeb, 0x7e, 0xa4, 0xd7, 0x92, 0x47, 0xd8, 0xdf, 0xd6, 0x48,
	0x63, 0x74, 0xbb, 0x93, 0xe6, 0x0d, 0xe2, 0x81, 0x6f, 0x17, 0x4d, 0xd4, 0xd3, 0x70, 0x38, 0x68,
	0xc4, 0xfa, 0x41, 0xe9, 0x00, 0x14, 0xca, 0xff, 0x98, 0xd8, 0x0c, 0x26, 0x8d, 0x2b, 0xf9, 0x1e,
	0xb6, 0x3b, 0x79, 0xf1, 0x49, 0x80, 0xde, 0x5c, 0xb1, 0x5b, 0x38, 0xba, 0x96, 0x7e, 0x7b, 0x15,
	0x76, 0x92, 0xd9, 0x32, 0x1b, 0x1f, 0x33, 0x61, 0xa3, 0xae, 0xad, 0xdb, 0xf4, 0xf4, 0xfd, 0xeb,
	0xfb, 0x83, 0x1e, 0xa7, 0x90, 0xbb, 0x30, 0x58, 0x91, 0x65, 0x08, 0x0c, 0x8b, 0xf5, 0x81, 0xa3,
	0x7b, 0xf4, 0x81, 0x7f, 0xb6, 0x1f, 0x06, 0x86, 0xc1, 0x8a, 0x2c, 0xcb, 0x7d, 0x7c, 0xe3, 0xcb,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xdb, 0xeb, 0x39, 0x11, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IDClient is the client API for ID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IDClient interface {
	// Sends a id
	GetSnowflake(ctx context.Context, in *SnowflakeRequest, opts ...grpc.CallOption) (*SnowflakeReply, error)
	GetSonyflake(ctx context.Context, in *SonyflakeRequest, opts ...grpc.CallOption) (*SonyflakeReply, error)
}

type iDClient struct {
	cc *grpc.ClientConn
}

func NewIDClient(cc *grpc.ClientConn) IDClient {
	return &iDClient{cc}
}

func (c *iDClient) GetSnowflake(ctx context.Context, in *SnowflakeRequest, opts ...grpc.CallOption) (*SnowflakeReply, error) {
	out := new(SnowflakeReply)
	err := c.cc.Invoke(ctx, "/pb.ID/GetSnowflake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDClient) GetSonyflake(ctx context.Context, in *SonyflakeRequest, opts ...grpc.CallOption) (*SonyflakeReply, error) {
	out := new(SonyflakeReply)
	err := c.cc.Invoke(ctx, "/pb.ID/GetSonyflake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IDServer is the server API for ID service.
type IDServer interface {
	// Sends a id
	GetSnowflake(context.Context, *SnowflakeRequest) (*SnowflakeReply, error)
	GetSonyflake(context.Context, *SonyflakeRequest) (*SonyflakeReply, error)
}

// UnimplementedIDServer can be embedded to have forward compatible implementations.
type UnimplementedIDServer struct {
}

func (*UnimplementedIDServer) GetSnowflake(ctx context.Context, req *SnowflakeRequest) (*SnowflakeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnowflake not implemented")
}
func (*UnimplementedIDServer) GetSonyflake(ctx context.Context, req *SonyflakeRequest) (*SonyflakeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSonyflake not implemented")
}

func RegisterIDServer(s *grpc.Server, srv IDServer) {
	s.RegisterService(&_ID_serviceDesc, srv)
}

func _ID_GetSnowflake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnowflakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDServer).GetSnowflake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ID/GetSnowflake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDServer).GetSnowflake(ctx, req.(*SnowflakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ID_GetSonyflake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SonyflakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDServer).GetSonyflake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ID/GetSonyflake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDServer).GetSonyflake(ctx, req.(*SonyflakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ID_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ID",
	HandlerType: (*IDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSnowflake",
			Handler:    _ID_GetSnowflake_Handler,
		},
		{
			MethodName: "GetSonyflake",
			Handler:    _ID_GetSonyflake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "id.proto",
}
